services:
  web: # Frontend
    build: ./web
    ports:
      - "80:80"
    network_mode: host

  api01: &api # API Backend
    build: .
    volumes:
      - ./tmp:/actix/tmp
    environment:
      HTTP_PORT: 8080
      DB_HOST: localhost
      POOL_SIZE: 30
    depends_on:
      - db
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: '0.4GB'
    network_mode: host
    ports:
      - "8080:8080"

  api02: # API Backend
    <<: *api
    environment:
      HTTP_PORT: 8081
      DB_HOST: localhost
      POOL_SIZE: 30
    ports:
      - "8081:8081"

  web: # Frontend
    build:
      context: ./web/
      dockerfile: Dockerfile
    depends_on:
      - api01
      - api02
    network_mode: host
    environment:
      API: localhost:9999
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: '2.5GB'

  nginx: # Load Balancer
    image: nginx:latest
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./web/dist/bgm-web/browser:/web/dist/bgm-web/browser
    depends_on:
      - api01
      - api02
    network_mode: host
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: '3.0GB'

  db: # Database
    image: postgres
    hostname: db
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: 1234
      POSTGRES_DB: pj_georef
    volumes:
      - ./tmp:/uploaded
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./postgresql.conf:/docker-entrypoint-initdb.d/postgresql.conf
      - ./postgres-data:/var/lib/postgresql/data
    command: postgres -c config_file=/docker-entrypoint-initdb.d/postgresql.conf
    network_mode: host
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 5s
      timeout: 5s
      retries: 20
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '0.7'
          memory: '1.0GB'
